generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  password   String
  email      String     @unique
  bio        String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Tweet      Tweet[]
  Like       Like[]
  Response   Response[]
}

model Tweet {
  id         Int        @id @default(autoincrement())
  tweet      String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  Like       Like[]
  Response   Response[]
}

model Like {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  tweet      Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId    Int
  created_at DateTime @default(now())

  @@id(name: "id", [userId, tweetId])
}

model Response {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  tweet   Tweet @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  userId  Int
  tweetId Int
}
